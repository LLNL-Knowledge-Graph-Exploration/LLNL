<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SubGraph Visualization</title>
    
    <script type="module">
        import cytoscape from "cytoscape";
        window.cytoscape = cytoscape;
        function fetchData() {
            fetch('/data.json')
            .then(response => response.json())
            .then(data => {
                var cy = cytoscape({
                    container: document.getElementById('cy'),
                    elements: data,
                    style: [
                        {
                            selector: 'node',
                            style: {
                                'background-color': '#666',
                                'label': 'data(id)'
                            }
                        },
                        {
                            selector: 'edge',
                            style: {
                                'width': 3,
                                'line-color': '#ccc',
                                'target-arrow-color': '#ccc',
                                'target-arrow-shape': 'none',
                                'curve-style': 'bezier'
                            }
                        },
                    ],
                    layout: {
                        name: 'breadthfirst',
                        directed: false,
                        padding: 10
                    }

                });
                window.cy = cy;
                cy.on('click', 'node', function(evt){
                    console.log( 'clicked ' + this.id() );
                    document.getElementById("nodeId").textContent = this.data("id");
                    document.getElementById("metaDataInclude").removeAttribute('hidden');
                    document.getElementById("metaDataExclude").removeAttribute('hidden');
                    document.getElementById("metaDataInclude").setAttribute('data-id', this.id());
                    document.getElementById("metaDataExclude").setAttribute('data-id', this.id());
                    var table = document.getElementById("metaDataTable");
                    while (table.firstChild) {
                        table.removeChild(table.firstChild);
                    }
                    var data = this.data();
                    // Loop through the data
                    for (const key in data) {
                        if (data.hasOwnProperty(key) && key!="id") {
                            const newRow = table.insertRow(table.rows.length);

                            const cell1 = newRow.insertCell(0);
                            const cell2 = newRow.insertCell(1);

                            cell1.innerHTML = key;
                            cell2.innerHTML = data[key];
                        }
                    }
                });
                cy.on('click', 'edge', function(evt){
                    document.getElementById("nodeId").textContent = this.data("id");
                    document.getElementById("metaDataInclude").setAttribute('hidden', true);
                    document.getElementById("metaDataExclude").setAttribute('hidden', true);
                    console.log( 'clicked ' + this.id() );
                    var table = document.getElementById("metaDataTable");
                    while (table.firstChild) {
                        table.removeChild(table.firstChild);
                    }
                    var data = this.data();
                    // Loop through the data
                    for (const key in data) {
                        if (data.hasOwnProperty(key) && key!="id") {
                            const newRow = table.insertRow(table.rows.length);

                            const cell1 = newRow.insertCell(0);
                            const cell2 = newRow.insertCell(1);

                            cell1.innerHTML = key;
                            cell2.innerHTML = data[key];
                        }
                    }
                })
            });
        }

        function handleNodeClick(nodeIdToSelect) {
            // Simulate the actions that occur when a node is clicked
            console.log("Simulating node click");

            const node = cy.$(`#${nodeIdToSelect}`);
            node.select();
            console.log("Node selected")
            var nodeId = node.id();
            console.log("Got nodeId")
            document.getElementById("nodeId").textContent = nodeId;
            document.getElementById("metaDataInclude").removeAttribute('hidden');
            document.getElementById("metaDataExclude").removeAttribute('hidden');
            console.log("Include and Exclude are showing up")
            document.getElementById("metaDataInclude").setAttribute('data-id', nodeId);
            document.getElementById("metaDataExclude").setAttribute('data-id', nodeId);
            console.log("Got nodeId")
            var table = document.getElementById("metaDataTable");
            while (table.firstChild) {
                table.removeChild(table.firstChild);
            }
            var data = node.data();
            for (const key in data) {
                if (data.hasOwnProperty(key) && key !== "id") {
                const newRow = table.insertRow(table.rows.length);
                const cell1 = newRow.insertCell(0);
                const cell2 = newRow.insertCell(1);
                cell1.innerHTML = key;
                cell2.innerHTML = data[key];
                }
            }
        }
        window.handleNodeClick = handleNodeClick;

        function getCurrentNodesInGraph() {
            const currentNodes = cy.nodes().map(node => node.id());
            return currentNodes;
        }
        window.getCurrentNodesInGraph = getCurrentNodesInGraph;

        // Call fetchData() when the page is originally rendered
        fetchData();

        document.getElementById('mainForm').addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent the default form submission behavior

        const formData = new FormData(event.target); // Get form data

        try {
            const response = await fetch('/process_data', {
            method: 'POST',
            body: formData,
            });

            if (response.ok) {
            // Handle success, maybe update the UI
            // Reload the graph or display a success message
            // You may also fetch and reload the updated data.json here
            fetchData();
            } else {
                const errorResponse = await response.json();
                console.error('Error:', errorResponse.error);
                alert('Error:'+ errorResponse.error)
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error:'+ error)
        }
        });
    </script>
    
</head>
<body>
    <header>
        <h1 class="heading">SubGraph Visualization 
            <div class="logout">
                <%= render "shared/user_detail"%>
            </div>
        </h1>
        
    </header>
    
    <div class="container">
        <div class="left-column">
            <form id="mainForm", method="post">
                <%= csrf_meta_tags %>
                <div class="dynamic-section">
                    <h2>Upload</h2>
                    <input 
                        name="uploadedFile"
                        type="file" />
                </div>
                <!-- Include Section -->
                <div class="dynamic-section">
                    <h2>Include</h2>
                    <div id="includeFields" class="dynamic-fields">
                        <div class="dynamic-field">
                            <input type="text" id="include0" name="include[]" placeholder="Include Text" required>
                        </div>
                    </div>
                    <button type="button" id="addMoreInclude" onclick="includeField('includeFields')">Add More</button>
                    <button type="button" onclick="removeInput('includeFields')">Remove</button>
                </div>

                <!-- Exclude Section -->
                <div class="dynamic-section">
                    <h2>Exclude</h2>
                    <div id="excludeFields" class="dynamic-fields">
                        <div class="dynamic-field">
                            <input type="text" id="exclude0" name="exclude[]" placeholder="Exclude Text">
                        </div>
                    </div>
                    <button type="button" id="addMoreExclude" onclick="includeField('excludeFields')">Add More</button>
                    <button type="button" onclick="removeInput('excludeFields')">Remove</button>
                </div>

                <!-- Budget Section -->
                <div>
                    <h2>Budget</h2>
                    <input id="budgetInput" type="number" name="budget" placeholder="Enter Budget">
                </div>

                <br>
                <input id="mainFormSubmit" type="submit" value="Submit">
            </form>
        </div>
        <div class="center-column">
            <h2>Graph Visualization</h2>            
            <div style="text-align: left"id="cy"></div>          
        </div>
        <div class="right-column">
          <form id="metaDataForm">
            <h2>Meta Data</h2>
            <h4 id="nodeId"></h4>
            <table id="metaDataTable"></table>
            <br>
            <button id="metaDataInclude" type="button" onclick="addFieldToForm(this)" data-container-id="includeFields" data-id="" hidden>Include</button>
            <button id="metaDataExclude" type="button" onclick="addFieldToForm(this)" data-container-id="excludeFields" data-id="" hidden>Exclude</button>
          </form>
        </div>
    </div>
    <script>
        num_fields = 1;
        function addField(containerId) {
            const container = document.getElementById(containerId);
            const fields = container.getElementsByClassName("dynamic-field");

            // Determine the next available ID
            const nextId = fields.length > 0 ? parseInt(fields[fields.length - 1].querySelector("input").id.slice(-1)) + 1 : 0;

            const field = document.createElement("div");
            field.classList.add("dynamic-field");
            num_fields += 1;

            if (containerId === 'includeFields') {
                field.innerHTML = `<input type="text" id="include${nextId}" name="include[]" placeholder="Include Text" required>`;
            } else {
                field.innerHTML = `<input type="text" id="exclude${nextId}" name="exclude[]" placeholder="Exclude Text">`;
            }

            container.appendChild(field);
            return field;
        }


        function includeField(containerId) {
            var field = addField(containerId);
            if (field == null){
                console.log('Error creating field');
            }
        }

        function removeInput(containerId) {
            const container = document.getElementById(containerId);
            const allFields = container.querySelectorAll('.dynamic-field');
            if (allFields.length > 1) {
                allFields[allFields.length - 1].remove();
            }
            num_fields -= 1;
        }


        document.addEventListener("DOMContentLoaded", function() {
            const form = document.getElementById('mainForm');
            form.addEventListener('submit', function(event) {
                const budgetInput = document.getElementById('budgetInput');
                const budgetValue = parseInt(budgetInput.value, 10);
                
                if (budgetValue < num_fields) {
                event.preventDefault(); // Stop the form from submitting
                alert('The number of included nodes exceeds the budget'); // Inform the user
                // You can also display this message in a more user-friendly way instead of an alert
                }
                // If the budget is 6 or more, the form will proceed with the submission
            });
        });

        function addFieldToForm(element) {
            const container = document.getElementById(element.dataset.containerId);
            const allFields = container.querySelectorAll('.dynamic-field');
            
            if (allFields != null) {
                var found = false;
                var createField = true;
                var fieldIndex = 0;
                var field = null;
                for (var i = 0, n = allFields.length; i < n; i = i + 1) {
                    found = allFields[i].children[0].value === element.dataset.id;

                    if (found){
                        return;
                    }

                    if (allFields[i].children[0].value === ""){
                        createField = false;
                        fieldIndex = i;
                        break;
                    }
                }

                if (createField){
                    field = addField(element.dataset.containerId);
                    
                }
                else{
                    field = allFields[fieldIndex];
                }
                
                if (field == null){
                    console.log('Error creating field');
                }

                field.children[0].value = element.dataset.id;
            }
        }

    </script>    
    </body>
</html>
