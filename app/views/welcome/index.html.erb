<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SubGraph Visualization</title>
</head>
<body>
    <header>
        <h1>SubGraph Visualization</h1>
    </header>
    <div class="logout">
    <%= render "shared/user_detail"%>
    </div>
    <div class="container">
        <div class="left-column">
            <form id="mainForm", method="post">
                <%= csrf_meta_tags %>
                <!-- Include Section -->
                <div class="dynamic-section">
                    <h2>Include</h2>
                    <div id="includeFields" class="dynamic-fields">
                        <div class="dynamic-field">
                            <input type="text" name="include[]" placeholder="Include Text" required>
                        </div>
                    </div>
                    <button type="button" onclick="addField('includeFields')">Add More</button>
                    <button type="button" onclick="removeField('includeFields')">Remove</button>
                </div>

                <!-- Exclude Section -->
                <div class="dynamic-section">
                    <h2>Exclude</h2>
                    <div id="excludeFields" class="dynamic-fields">
                        <div class="dynamic-field">
                            <input type="text" name="exclude[]" placeholder="Exclude Text">
                        </div>
                    </div>
                    <button type="button" onclick="addField('excludeFields')">Add More</button>
                    <button type="button" onclick="removeField('excludeFields')">Remove</button>
                </div>

                <!-- Budget Section -->
                <div>
                    <h2>Budget</h2>
                    <input type="number" name="budget" placeholder="Enter Budget">
                </div>

                <br>
                <input type="submit" value="Submit">
            </form>
        </div>
        <div class="center-column">
            <h2>Graph Visualization</h2>            
            <div style="text-align: left"id="cy"></div>          
        </div>
        <div class="right-column">
          <form id="metaDataForm">
            <h2>Meta Data</h2>
            <h4 id="nodeId"></h4>
            <table id="metaDataTable"></table>
            <br>
            <button id="metaDataInclude" type="button" onclick="addField('includeFields')" hidden>Include</button>
            <button id="metaDataExclude" type="button" onclick="removeField('excludeFields')" hidden>Exclude</button>
          </form>
        </div>
    </div>
    <script>
        function addField(containerId) {
            const container = document.getElementById(containerId);
            const field = document.createElement("div");
            field.classList.add("dynamic-field");

            if(containerId === 'includeFields') {
                field.innerHTML = '<input type="text" name="include[]" placeholder="Include Text" required>';
            } else {
                field.innerHTML = '<input type="text" name="exclude[]" placeholder="Exclude Text">';
            }

            container.appendChild(field);
        }

        function removeField(containerId) {
            const container = document.getElementById(containerId);
            const allFields = container.querySelectorAll('.dynamic-field');
            if (allFields.length > 1) {
                allFields[allFields.length - 1].remove();
            }
        }
    </script>
    <script type="module">
    import cytoscape from "cytoscape";

    function fetchData() {
        fetch('/data.json')
          .then(response => response.json())
          .then(data => {
              var cy = cytoscape({
                  container: document.getElementById('cy'),
                  elements: data,
                  style: [
                      {
                          selector: 'node',
                          style: {
                              'background-color': '#666',
                              'label': 'data(id)'
                          }
                      },
                      {
                          selector: 'edge',
                          style: {
                              'width': 3,
                              'line-color': '#ccc',
                              'target-arrow-color': '#ccc',
                              'target-arrow-shape': 'none',
                              'curve-style': 'bezier'
                          }
                      },
                  ],

              });
              cy.on('click', 'node', function(evt){
                  console.log( 'clicked ' + this.id() );
                  document.getElementById("nodeId").textContent = this.data("id");
                  document.getElementById("metaDataInclude").removeAttribute('hidden');
                  document.getElementById("metaDataExclude").removeAttribute('hidden');
                  var table = document.getElementById("metaDataTable");
                  while (table.firstChild) {
                      table.removeChild(table.firstChild);
                  }
                  var data = this.data();
                  // Loop through the data
                  for (const key in data) {
                      if (data.hasOwnProperty(key) && key!="id") {
                          const newRow = table.insertRow(table.rows.length);

                          const cell1 = newRow.insertCell(0);
                          const cell2 = newRow.insertCell(1);

                          cell1.innerHTML = key;
                          cell2.innerHTML = data[key];
                      }
                  }
              })
          });
    }

    document.getElementById('mainForm').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent the default form submission behavior

    const formData = new FormData(event.target); // Get form data

    try {
        const response = await fetch('/process_data', {
        method: 'POST',
        body: formData,
        });

        if (response.ok) {
        // Handle success, maybe update the UI
        // Reload the graph or display a success message
        // You may also fetch and reload the updated data.json here
        fetchData();
        } else {
        // Handle errors, show an error message, etc.
        }
    } catch (error) {
        console.error('Error:', error);
    }
    });

    </script>
</body>
</html>
